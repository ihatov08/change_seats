<p id="notice"><%= notice %></p>

<h1>Listing Tasks</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Comment</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @tasks.each do |task| %>
      <tr>
        <td><%= task.name %></td>
        <td><%= task.comment %></td>
        <td><%= link_to 'Show', task %></td>
        <td><%= link_to 'Edit', edit_task_path(task) %></td>
        <td><%= link_to 'Destroy', task, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Task', new_task_path %>

<h1>課題</h1>
<p>WebブラウザとWebサーバはHTTPというプロトコルを使って通信しています。</p>
<p>RailsでWebアプリケーションを作ったり、Webブラウザを操作したりしているとHTTPのことをあまり意識せずに操作できてしまいます</p>
<p>しかし、技術者としてはいざというときのトラブルシューティングや効率の良いデバッグのために、裏側の仕組みを理解しておくことも重要です。</p>
<p>WebブラウザとWebサーバがHTTPで通信していることを理解するために、WebブラウザではなくターミナルからWebアプリケーションを操作してください。</p>
<ul>
  <li><%= link_to 'New Task', new_task_path %>にはnameとcommentという2つのフィールドしか持たない単純なscaffoldが表示されます。</li>
  <li>ブラウザを使わずにターミナルとcurlコマンドだけでtaskのCRUD(作成、読み取り、更新、削除)を実行してみてください。nameには自分の名前を送信してください。</li>
  <li>更新や削除で使用するURLやパラメータについては、ブラウザからHTMLソースを開き、フォームの送信先URLやテキストボックスのname属性等を参考にしてください。</li>
</ul>

<br>
<h3>参考</h3>
<ul>
  <li><a href="http://d.hatena.ne.jp/thata/20100207/1265554365" target="_blank">[ruby][rails]curlコマンドからのRESTなリクエストを送り方</li>
</ul>



